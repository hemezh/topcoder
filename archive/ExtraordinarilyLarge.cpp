#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <complex>

 
using namespace std;
 
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<int> pnt;
typedef pair<int, int> pii;

#define FOR(i,a,b) for(i=a;i<b;i++) 
#define RA(x) (x).begin(), (x).end()
#define REV(x) reverse(RA(x))
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())
#define X first
#define Y second

 
class ExtraordinarilyLarge {
public:
	ll fact(int n){
		int i;
		ll ans = 1;
		FOR(i, 1, n+1){
			ans *= i;
		}
		return ans;
	}
	string compare(string x, string y){
		int c1 = 0, c2 = 0, i;
		string a1 = "x<y", a2 = "x>y", a3 = "x=y", b = x, c = y;
		if(x == y) return a3;
		FOR(i, 0, SZ(x)){
			if(x[i] == '!') {
				c1++;
				x.erase(x.begin()+i);
				i--;
			}
		}
		FOR(i, 0, SZ(y)){
			if(y[i] == '!') {
				c2++;
				y.erase(y.begin()+i);
				i--;
			}
		}
		ll n, m;
		n = atoi(x.c_str());
		m = atoi(y.c_str());
		while(n<15 && c1>0){
			n = fact(n);
			c1--;
		}
		while(m<15 && c2>0){
			m = fact(m);
			c2--; 
		}		
		cout << n << m << endl;
		if(n == m && c1==c2) return a3;
		if(c1 == c2) return (n>m)?a2:a1;
		return (c1>c2)?a2:a1;
	} 
};

 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ExtraordinarilyLarge *obj;
	string answer;
	obj = new ExtraordinarilyLarge();
	clock_t startTime = clock();
	answer = obj->compare(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "14!";
	p1 = "13!";
	p2 = "x>y";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "9!";
	p1 = "999999999";
	p2 = "x<y";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "9!!";
	p1 = "999999999";
	p2 = "x>y";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "456!!!";
	p1 = "123!!!!!!";
	p2 = "x<y";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "5!";
	p1 = "120";
	p2 = "x=y";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
 

		

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
