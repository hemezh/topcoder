#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

int dx[] = {-1, 0, 0, 1};
int dy[] = {0, -1, 1, 0};
class PizzaDelivery {
public:
	int grid[55][55];
	int n, m;
	int deliverAll(vector <string> terrain) {
		int n = terrain.size(), m = terrain[0].size();
		int sx, sy;
		vector< pair<int, int> > pizza;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				if (terrain[i][j] == 'X') sx = i, sy = j, grid[i][j] = -1;
				else if (terrain[i][j] == '$') grid[i][j] = -1, pizza.push_back(make_pair(i,j));
				else grid[i][j] = terrain[i][j] - '0';
			}
		int dist[55][55];
		bool vis[55][55];
		memset(vis, false, sizeof(vis));
		dist[sx][sy] = 0;
		vis[sx][sy] = true;
		queue<pair<int, int> > Q;
		Q.push(make_pair(sx,sy));
		while (!Q.empty()) {
			int x = Q.front().first, y = Q.front().second; Q.pop();
			for (int d = 0; d < 4; d++) {
				int nx = x+dx[d], ny = y+dy[d];
				if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
				if (vis[nx][ny]) continue;
				vis[nx][ny] = true;
				Q.push(make_pair(nx, ny));
				if (grid[nx][ny] == -1) dist[nx][ny] = dist[x][y] + 2;
				else if (abs(grid[x][y] - grid[nx][ny]) == 0) dist[nx][ny] = dist[x][y] + 1;
				else if (abs(grid[x][y] - grid[nx][ny]) == 1) dist[nx][ny] = dist[x][y] + 3;
			}			
		}
		
		int n = pizza.size();
		
		for (int i = 0; i < (1<<n); i++) {
			
		}
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PizzaDelivery *obj;
	int answer;
	obj = new PizzaDelivery();
	clock_t startTime = clock();
	answer = obj->deliverAll(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"3442211","34$221X","3442211"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"001000$","$010X0$","0010000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"001000$","$010X0$","0010000","2232222","2222222","111$111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"001000$","$010X0$","0010000","1232222","2222222","111$111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 28;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"X$$","$$$"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 14;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
