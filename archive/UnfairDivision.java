import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

import java.util.*; 

public class UnfairDivision { 
  public int albertsShare(int[] assets) { 
        int res = 0; 
        int n = assets.length; 
        for (int i = 0; i < n - 1; i++) { 
            int mxa = 0; 
            int mxb = 0; 
            int mxc = 0; 
            for (int j = 0; j < n - 1; j++) if (i != j) { 
                int ii = Math.min(i, j); 
                int jj = Math.max(i, j); 
                int[] a = new int[3]; 
                for (int k = 0; k < n; k++) { 
                    if (k <= ii) a[0]+= assets[k]; 
                    else if (k <= jj) a[1] += assets[k]; 
                    else a[2] += assets[k]; 
                } 
                Arrays.sort(a); 
                System.out.println(a[0] + " " + a[1] + " " + a[2]);
                System.out.println(
                if (a[1] > mxa || (a[1] == mxa && a[2] > mxb)) { 
                    mxa = a[1]; 
                    mxb = a[2]; 
                    mxc = a[0]; 
                } 
            } 
            if (mxc > res) res = mxc; 
        } 
        return res; 
  } 


	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		UnfairDivision obj;
		int answer;
		obj = new UnfairDivision();
		long startTime = System.currentTimeMillis();
		answer = obj.albertsShare(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{40, 19, 1, 1, 19, 1, 40};
		p1 = 19;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{5,5,5};
		p1 = 5;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,1,1,1,1,1,1,1,1};
		p1 = 2;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,3,4,5,6,7,8,9};
		p1 = 10;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
