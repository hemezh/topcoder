#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <complex>

 
using namespace std;
 
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<int> pnt;
typedef pair<int, int> pii;

#define FOR(i,a,b) for(i=a;i<b;i++) 
#define RA(x) (x).begin(), (x).end()
#define REV(x) reverse(RA(x))
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())
#define X first
#define Y second

 
class BusSeating {
public:
	double dist(int a, int b, int c, int d){
		if(a) a++; if(c) c++;
		return sqrt((a-c)*(a-c)*1.0 + (b-d)*(b-d)*1.0); 
	}
	double getArrangement(string a, string b){
		int i, j, k;
		double d, ans = 1e10;
		FOR(i, 0, 20) FOR(j, 0, 20) FOR(k, 0, 20) if(i!=j && j!=k && i!=k){
			char c1, c2, c3;
			c1 = (i<10)?a[i]:b[i-10];
			c2 = (j<10)?a[j]:b[j-10];
			c3 = (k<10)?a[k]:b[k-10];
			if(c1 == 'X' || c2 == 'X' || c3 == 'X') continue;
			d = dist(i/10, i%10, j/10, j%10); 
			d += dist(i/10, i%10, k/10, k%10); 
			d += dist(k/10, k%10, j/10, j%10); 
			ans = min(d, ans);
		}
		return ans;
	} 
};

 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	BusSeating *obj;
	double answer;
	obj = new BusSeating();
	clock_t startTime = clock();
	answer = obj->getArrangement(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = "----------";
	p1 = "----------";
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "XXX-X-XX-X";
	p1 = "-XXXX---XX";
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "XXXXXXXXXX";
	p1 = "-XX-XX-X--";
	p2 = 6.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "XXX-X-XX-X";
	p1 = "XXX-X-XX-X";
	p2 = 6.82842712474619;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
 

		

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
