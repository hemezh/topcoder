#include <string>
#include <vector>
#include <map>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <set>
#include <iostream>
#include <sstream>
#include <cstddef>
#include <algorithm>
#include <utility>
#include <iterator>
#include <numeric>
#include <list>
#include <complex>
 
using namespace std;
 
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<int> pnt;
typedef pair<int, int> pii;

#define FOR(i,a,b) for(i=a;i<b;i++) 
#define RA(x) (x).begin(), (x).end()
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())

int vis[55];
bool lc(char c){
	return (c >= 'a' && c <= 'z');
}
class Dating {
public:
	string dates(string c, int k){
		fill(vis, vis+55, 0);
		string res;
		k--;
		int idx = 0;
		while(1){
			int n = SZ(c);
			int f = 0, s1 = 0, s2 = 0, i;
			FOR(i, 0, SZ(c))
				if(!vis[i]){
					if(lc(c[i])) s1 = 1;
					else s2 = 1;
				}
			if(!s1 && !s2) break;
			char ch = 'Z';
			int z = k;
			while(z)
				if(!vis[++idx]){
					idx = (idx + 1)%n;
					z--;
					cout << idx;
				}
			
			while(vis[idx])
				idx = (idx+1)%n;
			if(lc(c[idx])){
				FOR(i, 0, SZ(c))
					if(!lc(c[i]) && !vis[i] && c[i] <= ch){
						s1 = i;
						f = 1;
						ch = c[i];
					}						
			}
			else {
				ch = 'z';
				FOR(i, 0, SZ(c))
					if(lc(c[i]) && !vis[i] && c[i] <= ch){
						s1 = i;
						f = 1;
						ch = c[i];
					}						
			}
			vis[s1] = 1;
			vis[idx] = 1;
			res += c[idx];
			res += ch;	
			if(f)
				res += " ";
		}
		return res;
	} 
};

 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	Dating *obj;
	string answer;
	obj = new Dating();
	clock_t startTime = clock();
	answer = obj->dates(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "abXCd";
	p1 = 2;
	p2 = "bC dX";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abXCd";
	p1 = 8;
	p2 = "Xa dC";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "HGFhgfz";
	p1 = 1;
	p2 = "Hf Gg Fh";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
 

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
