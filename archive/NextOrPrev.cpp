#include <string>
#include <vector>
#include <map>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <set>
#include <iostream>
#include <sstream>
#include <cstddef>
#include <algorithm>
#include <utility>
#include <iterator>
#include <numeric>
#include <list>
#include <complex>
 
using namespace std;
 
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<int> pnt;
typedef pair<int, int> pii;

#define FOR(i,a,b) for(i=a;i<b;i++) 
#define RA(x) (x).begin(), (x).end()
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())
#define X first
#define Y second
map<string, int>m;
int ans = 1<<30, n, p;
class NextOrPrev {
public:
	int getMinimum(int nextCost, int prevCost, string S, string G){
		int n = nextCost, p = prevCost, ans = 0, i, j, k, f = 1;
		int s[26], e[26];
		FOR(i, 0, 26) s[i] = e[i] = -1;
		FOR(i, 0, SZ(S)) s[S[i]-'a']=i;
		FOR(i, 0, SZ(S)) e[G[i]-'a']=i;
		FOR(i, 0, 26) cout << s[i] << " ";
		FOR(i, 0, 26){
			int x = s[i];
			if(s[i]!=-1)
			FOR(j, 0, 26){
				if(e[j] == x){
					cout << j << endl;
					if(j>i){
						FOR(k, 0, j) if(e[j]==-2) f=0;
						ans += n*(j-i);
						e[j] = -2;
					}
					if(j<i){
						FOR(k, j+1, 26) if(e[j]==-2) f=0;
						ans += p*(i-j);
						e[j] = -2;
					}
				}
			}
		}
		if(f==0)
			ans=-1;
		return ans;
	} 
};

 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, string p2, string p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "\"" << p2 << "\"" << "," << "\"" << p3 << "\"";
	cout << "]" << endl;
	NextOrPrev *obj;
	int answer;
	obj = new NextOrPrev();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	string p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 8;
	p2 = "abcdefghijklmnopqr";
	p3 = "ijklmnopqrstuvwxyz";
	p4 = 21;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 8;
	p2 = "ae";
	p3 = "cb";
	p4 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 1;
	p2 = "srm";
	p3 = "srm";
	p4 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 1;
	p2 = "acb";
	p3 = "bdc";
	p4 = 30;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 1;
	p2 = "zyxw";
	p3 = "vuts";
	p4 = 16;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 563;
	p1 = 440;
	p2 = "ptrbgcnlaizo";
	p3 = "rtscedkiahul";
	p4 = 10295;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 126;
	p1 = 311;
	p2 = "yovlkwpjgsna";
	p3 = "zpwnkytjisob";
	p4 = -1;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
 

		

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
