#include <string>
#include <vector>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <set>
#include <iostream>
#include <sstream>
#include <cstddef>
#include <algorithm>
#include <utility>
#include <iterator>
#include <numeric>
#include <list>
#include <complex>
 
using namespace std;
 
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<int> pnt;
typedef pair<int, int> pii;

#define FOR(i,a,b) for(i=a;i<b;i++) 
#define RA(x) (x).begin(), (x).end()
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())

 
class IndicatorMotionReverse {
public:
	string getMinProgram(vector <string> actions){
		string s = "";
		int i, j;
		FOR(i, 0, SZ(actions))
			s += actions[i];
		char map[4][4] = {{'S', 'L', 'F', 'R'}, {'R', 'S', 'L', 'F'}, {'F', 'R', 'S', 'L'}, { 'L', 'F', 'R', 'S'}};
		FOR(i, 0, SZ(s)){
			if(s[i] == '|') s[i] = '0';
			if(s[i] == 'N') s[i] = '1';
			if(s[i] == '-') s[i] = '2';
			if(s[i] == '/') s[i] = '3';
		}
		string ans = "";
		i = 1;
		while(i < SZ(s)){
			int count = 0;
			char ch = map[s[i-1] - '0'][s[i] - '0'];
			while(i < SZ(s) && map[s[i-1] - '0'][s[i] - '0'] == ch){
				count++;
				i++;
			}
			string cur = "", tmp = "";
			while(count > 99){
				tmp = ch;
				cur = tmp + "99" + cur;
				count -= 99;
			}
			char sp[3];
			sprintf(sp, "%.2d", count);
			ans += ch;
			ans += sp + cur;
		}
		if(SZ(ans) > 100){
			ans[99] = ans[98] = ans[97] = '.';
			ans.erase(ans.begin() + 100, ans.end());
		}
		return ans;
	} 
};

 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	IndicatorMotionReverse *obj;
	string answer;
	obj = new IndicatorMotionReverse();
	clock_t startTime = clock();
	answer = obj->getMinProgram(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"-|-|/-/|//////-/"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "F03R02L02R01S05R01L01";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "------|-|-|", "-|-|-|-|-|-", "|-|-|-|-|-|", "-|-|-|-|-|-", "|-|-|-|-|-|", "-|-|-|-|-|-", "|-|-|-|-|-|", "-|-|-|-|-|-", "|-|-|-|-|-|", "-|-|-|-|-|-", "|-|-|------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "-----------", "------------"};
;
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "S38S99S99F11F99S17S99";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"||||||||||||||||||||||||||||||||||||||||||||||||||","||||||||||||||||||||||||||||||||||||||||||||||||||","||||||||||||||||||||||||||||||||||||||||||||||||||"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "S50S99";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L...";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
 

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
